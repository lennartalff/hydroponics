#!/usr/bin/env python
# -*- coding: utf-8 -*-
import rospy
import threading
from avrhydroponics.msg import ds18b20, LedMetrics


class Node(object):
    def __init__(self):
        rospy.init_node("led_metrics_node", disable_signals=True)

        self.data_lock = threading.RLock()
        self.measurements = {}
        self.update_roms()

        self.led_publisher = rospy.Publisher("led_metrics",
                                             LedMetrics,
                                             queue_size=10)

        rospy.Subscriber("ds18b20", ds18b20, self.on_owi_data)

    def on_owi_data(self, msg):
        rom = tuple(msg.rom)
        value = msg.temperature
        stamp = msg.header.stamp.to_sec()
        with self.data_lock:
            if rom not in self.measurements:
                return
            entry = dict(value=value, stamp=stamp)
            self.measurements[rom] = entry

    def read_roms_from_params(self):
        data = rospy.get_param("rom_led")
        roms = []
        for rom in data:
            roms.append(tuple(rom))
        return roms

    def update_roms(self):
        roms = self.read_roms_from_params()
        with self.data_lock:
            self.measurements = {}
            for rom in roms:
                rospy.logdebug("Adding %s to LED ROMs", rom)
                self.measurements[rom] = dict()

    def run(self):
        rate = rospy.Rate(1.0 / 10.0)
        while not rospy.is_shutdown():
            with self.data_lock:
                temperatures = []
                for rom in self.measurements:
                    try:
                        temperatures.append(self.measurements[rom]["value"])
                    except KeyError:
                        pass
                if len(temperatures) == 0:
                    rospy.logwarn_throttle(1,
                        "Sensor cycle complete, but no LED temperatures available yet!"
                    )
                    continue

                avg_val = sum(temperatures) / len(temperatures)
                min_val = min(temperatures)
                max_val = max(temperatures)
                msg = LedMetrics()
                msg.header.stamp = rospy.Time.now()
                msg.temperature_avg = avg_val
                msg.temperature_max = max_val
                msg.temperature_min = min_val
                msg.n_sensors = len(temperatures)
                rospy.logdebug("LED: min/max/avg %.2f°C/%.2f°C/%.2f°C", min_val,
                               max_val, avg_val)
                self.led_publisher.publish(msg)
            try:
                rate.sleep()
            except KeyboardInterrupt:
                rospy.signal_shutdown("Keyboard Interrupt")


def main():
    node = Node()
    node.run()


if __name__ == "__main__":
    main()
